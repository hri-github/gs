ggplot(rocs_stacked, aes(x = model, y = statistic, group = id, col = id)) +
geom_line(alpha = .75) +
theme(legend.position = "none")
install.packages("labeling")
ggplot(rocs_stacked, aes(x = model, y = statistic, group = id, col = id)) +
geom_line(alpha = .75) +
theme(legend.position = "none")
?perf_mod
?vfold_cv
?nested_cv
library(kernlab)
# `object` will be an `rsplit` object from our `results` tibble
# `cost` is the tuning parameter
svm_rmse <- function(object, cost = 1) {
y_col <- ncol(object$data)
mod <- ksvm(y ~ ., data = analysis(object),  C = cost)
holdout_pred <- predict(mod, assessment(object)[-y_col])
rmse <- sqrt(mean((assessment(object)$y - holdout_pred) ^ 2, na.rm = TRUE))
rmse
}
library(widyr)
install.package("widyr")
install.packages("widyr")
install.packages("corrr")
library(dplyr); library(gapminder)
install.packages("gapminder")
library(dplyr); library(gapminder)
gapminder %>% pairwise_dist(country, lifeExp)
library(widyr)
gapminder %>% pairwise_dist(country, lifeExp)
?pairwise_dist
gapminder %>% pairwise_dist(country, year, lifeExp)
?pairwise_cor
gapminder %>% pairwise_cor(item=country, feature=year, value=lifeExp, upper=FALSE)
gapminder %>% pairwise_cor(item=country, feature=year, value=lifeExp, upper=FALSE)
gapminder %>% pairwise_dist(item=country, feature=year, value=lifeExp, upper=FALSE)
gapminder %>% pairwise_cor(item=country, feature=year, value=lifeExp, upper=FALSE)
install.packages("janeaustenr")
gapminder %>% pairwise_cor(item=country, feature=year, value=lifeExp, upper=FALSE)
install.packages("tokenizers")
gapminder %>% pairwise_cor(item=country, feature=year, value=lifeExp, upper=FALSE)
cor(mtcars)
correlate(mtcars)
library(corrr)
correlate(mtcars)
c1 <- correlate(mtcars)
filter(c1, cyl > .7)
focus(c1, mpg:drat)
focus(c1, mpg:drat, mirror=TRUE)
focus(c1, mpg:drat, mirror=TRUE) %>%
shave()
focus(c1, mpg:drat, mirror=TRUE) %>%
shave() %>%  # remove upper triangle
fashion()  # better formatting
focus(c1, mpg:drat, mirror=TRUE) %>%
shave() %>%
rplot()
focus(c1, mpg:drat, mirror=TRUE) %>%
rearrange(absolute=FALSE)
focus(c1, mpg:drat, mirror=TRUE)
focus(c1, mpg:drat, mirror=TRUE) %>%
rearrange(absolute=FALSE) %>%
shave() %>%
rplot()
library(shinyFeedback)
install.packages("shinyFeedback")
library(shinyFeedback)
library(shiny)
?feedbackWarning
library(recipes)
help(, "recipes")
help(, "psych")
library(psych)
install.packages("psych")
library(psych)
help(, "psych")
df <- data.frame(x1=rnorm(20))
df <- data.frame(x1=rnorm(20), g1=c("a", "a", rep("b", 5), rep("c", 13)) )
View(df)
str(df)
?select
?if_numeric
library(tidyverse)
?if_numeric
df %>%
map_df(~ count(.)) %>%
gather() %>%  # convert long
arrange(value)
df %>%
select_if(negate(is.numeric)) %>%
map_df(~ count(.)) %>%
gather() %>%  # convert long
arrange(value)
df %>%
summarize_all(count)
df %>%
select_if(negate(is.numeric)) %>%
summarize_all(count)
options(stringsAsFactors=FALSE)
df <- data.frame(x1=rnorm(20), g1=c("a", "a", rep("b", 5), rep("c", 13)) )
df %>%
select_if(negate(is.numeric)) %>%
summarize_all(count)
df %>%
select_if(negate(is.numeric)) %>%
summarize_all(~ count(.))
df %>%
select_if(negate(is.numeric)) %>%
map_df(~ count(.))
df %>%
select_if(negate(is.numeric))
df %>%
select_if(negate(is.numeric)) %>%
map_df(count(.))
df %>%
select_if(negate(is.numeric)) %>%
map_df(count)
df %>%
select_if(negate(is.numeric)) %>%
count()
df %>%
select_if(negate(is.numeric)) %>%
count(.)
df %>%
select_if(negate(is.numeric)) %>%
map_df(count(.))
df %>%
select_if(negate(is.numeric)) %>%
map_df(count)
df <- data.frame(x1=rnorm(20), g1=c("a", "a", rep("b", 5), rep("c", 13)), g2=c("a", "a", rep("b", 5), rep("c", 13)) )
df %>%
select_if(negate(is.numeric)) %>%
map_df(count)
df %>%
select_if(negate(is.numeric)) %>%
map(count)
df %>%
select_if(negate(is.numeric))
map
df %>%
select_if(negate(is.numeric)) %>%
map(., count)
df %>%
select_if(negate(is.numeric)) %>%
map(., dplyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_df(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_df(., dplyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_df(., plyr::count)
?group_by
df %>%
select_if(negate(is.numeric)) %>%
group_by_all()
df %>%
select_if(negate(is.numeric)) %>%
group_by_all() %>%
count()
?map_df
df %>%
select_if(negate(is.numeric)) %>%
map_dfr(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_chr(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_dfc(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_dfc(., dplyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map_dfc(., plyr::count)
df %>%
select_if(negate(is.numeric)) %>%
map(., plyr::count)
count(df$g1)
table(df$g1)
table(df$g1) <= 3
names(table(df$g1) <= 3)
names(table(df$g1))[table(df$g1) <= 3]
?table
sort(table(df$g1))
sort(table(df$g1), decreasing=TRUE)
sort(table(df$g1), decreasing=FALSE)
?sort
t1 <- sort(table(df$g1), decreasing=FALSE)
THRESHOLD <- 3
t1 <- sort(table(df$g1), decreasing=FALSE)
names(t1)[t1 <= THRESHOLD]
nameposition <- t1 <= THRESHOLD
nameposition
nameposition <- which(t1 <= THRESHOLD)
nameposition
library(reshape)
library(reshape2)
?combine_vars
?combine
vector <- df$g1
threshold <- 3
toCondense <- names(which(table(vector) < threshold))
toCondense
vector[vector %in% toCondense] <- newName
newName <- "Other"
vector[vector %in% toCondense] <- newName
vector
vector
t1 <- sort(table(vector))
positions <- which(t1 < threshold)
positions
str(positions)
positions <- c(positions, positions + 1)
positions
toCondense <- names(t1[positions])
toCondense
t1 <- sort(table(vector))
positions <- which(t1 < threshold)
vector
vector <- df$g1
t1 <- sort(table(vector))
positions <- which(t1 < threshold)
positions
if ( length(positions) == 1 ) {
positions <- c(positions, positions + 1)
}
positions
toCondense <- names(t1[positions])
toCondense
vector[vector %in% toCondense] <- newName
vector
options(stringsAsFactors=FALSE)
df <- data.frame(x1=c(NA, sample(1:5, 9)))
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)))
View(df)
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)),
x2=c(NA, sample(1:5, 8, replace=TRUE)),
g1=c(rep("a", 5), rep("b", 5))
)
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)),
x2=c(NA, sample(1:5, 8, replace=TRUE), NA),
g1=c(rep("a", 5), rep("b", 5))
)
View(df)
library(tidyverse)
?funs
?summarise_each
f1 <- function(x) {
mean(x >= 3, na.rm=TRUE)
}
f1(df$x1)
df
f1(df$x2)
5 / 9
3 / 8
df %>%
summarise_all(funs(f1) )
df %>%
group_by(g1) %>%
summarise_all(funs(f1))
df
df %>%
group_by(g1) %>%
summarise_all(funs(meaner) )
meaner <- function(x) {
mean(x >= 3, na.rm=TRUE)
}
df %>%
summarise_all(funs(meaner) )
df %>%
group_by(g1) %>%
summarise_all(funs(meaner) )
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)),
x2=c(NA, sample(1:5, 8, replace=TRUE), NA),
g1=c(rep("a", 5), rep("b", 5)),
g2=c(sample(c("c", "d"), 10, replace=TRUE) )
)
df
df %>%
group_by(g1, g2) %>%
summarise_all(funs(meaner) )
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)),
x2=c(NA, sample(1:5, 8, replace=TRUE), NA),
g1=c(rep("a", 5), rep("b", 5)),
g2=c("e", sample(c("c", "d"), 9, replace=TRUE) )
)
df %>%
group_by(g1, g2) %>%
summarise_all(funs(meaner) )
df
df <- data.frame(x1=c(NA, sample(1:5, 9, replace=TRUE)),
x2=c(NA, sample(1:5, 8, replace=TRUE), NA),
g1=c(rep("a", 5), rep("b", 5)),
g2=c("e", sample(c("c", "d"), 9, replace=TRUE) )
)
df %>%
group_by(g1, g2) %>%
summarise_all(funs(meaner) )
?left_join
app <- readxl::read_xlsx(file.choose())
setwd("E:\\Shiny\\UploadMatch v1.0")
setwd("F:\\Shiny\\UploadMatch v1.0")
app <- readxl::read_xlsx(file.choose())
opp <- readxl::read_xlsx(file.choose())
colnames(opp)[1:2] <- c("officer", "first")
colnames(app)[1:2] <- c("agency", "first")
opp$officer <- as.character(opp$officer); app$agency <- as.character(app$agency)
ap <- app; op <- opp
opref <- ncol(op) - 1
apref <- ncol(ap) - 1
keep <- apply(ap[, 2:ncol(ap)], 1, function(x) sum(is.na(x)) < apref)
agencynochoice <- ap$agency[!keep]  # Agencies with no choices (all NA) exclude from this round
ap <- ap[keep, ]
t1 <- table(as.matrix(ap[, 2:ncol(ap)]))  # Count of times each officer was chosen.
off_id <- as.numeric(gsub("[A-Za-z]", "", op$officer))  # first column must have numbers, cannot be pure english.
officerunloved <- off_id[! off_id %in% dimnames(t1)[[1]] ]  # Exclude form this round
officerunloved <- op$officer[officerunloved]
anc <- paste(agencynochoice, collapse=" "); oul <- paste(officerunloved, collapse=" ")
if (length(anc)==0) {anc <- NA}
if (length(oul)==0) {oul <- NA}
officerchosenonce <- dimnames(t1)[[1]]
keep <- off_id %in% officerchosenonce
op <- as.data.frame(op[keep, ])
odict <- data.frame( officer = op$officer )  # used for merge() later
# odict$onode <- 2:(nrow(odict)+1)
odict$value <- as.numeric( gsub("[A-Za-z]", "", odict$officer) )
odict$davalue <- 1:nrow(odict)
adict <- data.frame( agency = ap$agency )
# adict$anode <- ( max(odict$onode)+1 ):( max(odict$onode) + nrow(adict) )
adict$value <- gsub("[A-Za-z]", "", adict$agency)
adict$davalue <- 1:nrow(adict)
apm <- as.matrix(ap[, -1])
onot <- odict$value[!( odict$value %in% unique(as.vector(apm)) )]  # Officers NOT in agency preferences
opm <- as.matrix(op[, -1])
anot <- adict$value[!( adict$value %in% unique(as.vector(opm)) )]  # Agencies NOT in officer preferences
if (length(onot)==0) {onot <- NA}
if (length(anot)==0) {anot <- NA}
# output$chk3 <- renderPrint({ paste(onot, anot)})
opmu <- na.omit( unique(as.character(opm)) )
apmu <- na.omit( unique(as.character(apm)) )
opmu1 <- opmu[!(opmu %in% adict$value)]  # officers chose an agency, not in agency dictionary
apmu1 <- apmu[!(apmu %in% odict$value)]  # agency chose an officer, not in officer dictionary
opmu2 <- paste(opmu1, collapse=" ")
apmu2 <- paste(apmu1, collapse=" ")
opmu2
apmu2
jobpref <- t(ap[, -1])
candpref <- t(op[, -1])
jobpref[apply(jobpref, 2, duplicated)] <- NA  # Remove entries where agency selects same officer 3 times
candpref[apply(candpref, 2, duplicated)] <- NA
colnames(jobpref) <- ap$agency
colnames(candpref) <- op$officer
opmu2
apmu2
anc
oul
cp <- melt(candpref)
cp <- merge(x=cp, y=adict, by="value", all.x=TRUE)
cp <- rename(cp, choicelabel=Var1, officername=Var2)
cpin <- dcast(cp, choicelabel ~ officername, value.var="davalue" )
cpin <- as.matrix( select(cpin, -choicelabel) )
jp <- melt(jobpref)
jp <- merge(x=jp, y=odict, by.x="value", by.y="value")
jp <- rename(jp, choicelabel=Var1, agencyname=Var2)
jpin <- dcast(jp, choicelabel ~ agencyname, value.var="davalue" )
jpin <- as.matrix( select(jpin, -choicelabel) )
# v1.0 Last Modified: 051018
# setwd("E:\\Shiny\\UploadMatch v1.0")
library(readxl); library(reshape2); library(dplyr); options(stringsAsFactors=FALSE);
cp <- melt(candpref)
cp <- merge(x=cp, y=adict, by="value", all.x=TRUE)
cp <- rename(cp, choicelabel=Var1, officername=Var2)
cpin <- dcast(cp, choicelabel ~ officername, value.var="davalue" )
cpin <- as.matrix( select(cpin, -choicelabel) )
jp <- melt(jobpref)
jp <- merge(x=jp, y=odict, by.x="value", by.y="value")
jp <- rename(jp, choicelabel=Var1, agencyname=Var2)
jpin <- dcast(jp, choicelabel ~ agencyname, value.var="davalue" )
jpin <- as.matrix( select(jpin, -choicelabel) )
source("mysm v1.0.R")
View(mysm)
out2
str(out2)
res <- mysm(manpref=cpin, wompref=jpin)
tab1 <- with(res, data.frame(men=1:ncol(menmatch1), menmatch=as.vector(menmatch1), menchoice=as.vector(womronm)) )
ym <- data.frame(menmatch=1:ncol(res$menronw), womchoice=as.vector(res$menronw))
tab2 <- merge(x=tab1, y=ym, by="menmatch", all.x=TRUE)
tab2 <- select(tab2, men, menmatch, menchoice, womchoice) %>% arrange(men)
ym <- select(adict, davalue, agency)
tab3 <- merge(x=tab2, y=ym, all.x=TRUE, by.x="menmatch", by.y="davalue")
tab3 <- arrange(tab3, men)
tab4 <- merge(x=tab3, y=odict, all.x=TRUE, by.x="men", by.y="davalue")
outC <- select(tab4, officer, agency, menchoice, womchoice)
outC$drop <- (is.na(outC$menchoice)|is.infinite(outC$menchoice)) | (is.na(outC$womchoice)|is.infinite(outC$womchoice))
out1 <- outC[outC$drop==FALSE, ] %>% select(-drop)
out1$menchoice <- as.integer(out1$menchoice); out1$womchoice <- as.integer(out1$womchoice)
colnames(out1) <- c("Officer", "Agency allocated", "Officer's ranked choice", "Agency's ranked choice")
ofgd <- as.character(outC$officer[outC$drop==FALSE])
ofun <- opp$officer[!opp$officer %in% ofgd]
aggd <- as.character(outC$agency[outC$drop==FALSE])
agun <- app$agency[!app$agency %in% aggd]
ofundfC <- data.frame(`Unmatched officers`=ofun)
colnames(ofundfC) <- "Unmatched officers"
agundfC <- data.frame(`Unmatched agencies`=agun)
colnames(agundfC) <- "Unmatched agencies"
out1
shiny::runApp("UploadMatch", launch.browser=TRUE)
shiny::runApp(, launch.browser=TRUE)
?downloadButton
?actionButton
shiny::runApp(, launch.browser=TRUE)
shiny::runApp(, launch.browser=TRUE)
out2
out1
res2 <- mysm(manpref=jpin, wompref=cpin)
tab1 <- with(res2, data.frame(men=1:ncol(menmatch1), menmatch=as.vector(menmatch1), menchoice=as.vector(womronm)) )
ym <- data.frame(menmatch=1:ncol(res2$menronw), womchoice=as.vector(res2$menronw))
tab2 <- merge(x=tab1, y=ym, by="menmatch", all.x=TRUE)
tab2 <- select(tab2, men, menmatch, menchoice, womchoice) %>% arrange(men)
ym <- select(odict, davalue, officer, onode)  # adict in previous
tab3 <- merge(x=tab2, y=ym, all.x=TRUE, by.x="menmatch", by.y="davalue")  # menmatch is which Officer was chosen
tab3 <- arrange(tab3, men)
tab4 <- merge(x=tab3, y=adict, all.x=TRUE, by.x="men", by.y="davalue")  # men are the Job
tab4 <- arrange(tab4, onode)
outA <- select(tab4, officer, agency, womchoice, menchoice)
outA$drop <- (is.na(outA$menchoice)|is.infinite(outA$menchoice)) | (is.na(outA$womchoice)|is.infinite(outA$womchoice))
out2 <- outA[outA$drop==FALSE, ] %>% select(-drop)
out2$menchoice <- as.integer(out2$menchoice); out2$womchoice <- as.integer(out2$womchoice)
colnames(out2) <- c("Officer", "Agency allocated", "Officer's ranked choice", "Agency's ranked choice")
## USING AGENICES AS MEN ####
# Remember: GaleShapeley favors the proposers (proposers are men)
# Produces out2
res2 <- mysm(manpref=jpin, wompref=cpin)
tab1 <- with(res2, data.frame(men=1:ncol(menmatch1), menmatch=as.vector(menmatch1), menchoice=as.vector(womronm)) )
ym <- data.frame(menmatch=1:ncol(res2$menronw), womchoice=as.vector(res2$menronw))
tab2 <- merge(x=tab1, y=ym, by="menmatch", all.x=TRUE)
tab2 <- select(tab2, men, menmatch, menchoice, womchoice) %>% arrange(men)
ym <- select(odict, davalue, officer)
tab3 <- merge(x=tab2, y=ym, all.x=TRUE, by.x="menmatch", by.y="davalue")  # menmatch is which Officer was chosen
tab3 <- arrange(tab3, men)
tab4 <- merge(x=tab3, y=adict, all.x=TRUE, by.x="men", by.y="davalue")  # men are the Job
tab4 <- arrange(tab4, onode)
outA <- select(tab4, officer, agency, womchoice, menchoice)
tab1
tab4
# tab4 <- arrange(tab4, onode)
outA <- select(tab4, officer, agency, womchoice, menchoice)
outA$drop <- (is.na(outA$menchoice)|is.infinite(outA$menchoice)) | (is.na(outA$womchoice)|is.infinite(outA$womchoice))
out2 <- outA[outA$drop==FALSE, ] %>% select(-drop)
out2$menchoice <- as.integer(out2$menchoice); out2$womchoice <- as.integer(out2$womchoice)
colnames(out2) <- c("Officer", "Agency allocated", "Officer's ranked choice", "Agency's ranked choice")
out2
dim(out1)
dim(out2)
odict
adict
shiny::runApp(, launch.browser=TRUE)
res <- mysm(manpref=cpin, wompref=jpin)
tab1 <- with(res, data.frame(men=1:ncol(menmatch1), menmatch=as.vector(menmatch1), menchoice=as.vector(womronm)) )
ym <- data.frame(menmatch=1:ncol(res$menronw), womchoice=as.vector(res$menronw))
tab2 <- merge(x=tab1, y=ym, by="menmatch", all.x=TRUE)
tab2 <- select(tab2, men, menmatch, menchoice, womchoice) %>% arrange(men)
ym <- select(adict, davalue, agency)
tab3 <- merge(x=tab2, y=ym, all.x=TRUE, by.x="menmatch", by.y="davalue")
tab3 <- arrange(tab3, men)
tab4 <- merge(x=tab3, y=odict, all.x=TRUE, by.x="men", by.y="davalue")
outC <- select(tab4, officer, agency, menchoice, womchoice)
outC$drop <- (is.na(outC$menchoice)|is.infinite(outC$menchoice)) | (is.na(outC$womchoice)|is.infinite(outC$womchoice))
out1 <- outC[outC$drop==FALSE, ] %>% select(-drop)
out1$menchoice <- as.integer(out1$menchoice); out1$womchoice <- as.integer(out1$womchoice)
colnames(out1) <- c("Officer", "Agency allocated", "Officer's ranked choice", "Agency's ranked choice")
res2 <- mysm(manpref=jpin, wompref=cpin)
tab1 <- with(res2, data.frame(men=1:ncol(menmatch1), menmatch=as.vector(menmatch1), menchoice=as.vector(womronm)) )
ym <- data.frame(menmatch=1:ncol(res2$menronw), womchoice=as.vector(res2$menronw))
tab2 <- merge(x=tab1, y=ym, by="menmatch", all.x=TRUE)
tab2 <- select(tab2, men, menmatch, menchoice, womchoice) %>% arrange(men)
ym <- select(odict, davalue, officer)
tab3 <- merge(x=tab2, y=ym, all.x=TRUE, by.x="menmatch", by.y="davalue")  # menmatch is which Officer was chosen
tab3 <- arrange(tab3, men)
tab4 <- merge(x=tab3, y=adict, all.x=TRUE, by.x="men", by.y="davalue")  # men are the Job
# tab4 <- arrange(tab4, onode)
outA <- select(tab4, officer, agency, womchoice, menchoice)
outA$drop <- (is.na(outA$menchoice)|is.infinite(outA$menchoice)) | (is.na(outA$womchoice)|is.infinite(outA$womchoice))
out2 <- outA[outA$drop==FALSE, ] %>% select(-drop)
out2$menchoice <- as.integer(out2$menchoice); out2$womchoice <- as.integer(out2$womchoice)
colnames(out2) <- c("Officer", "Agency allocated", "Officer's ranked choice", "Agency's ranked choice")
View(out1)
View(out2)
shiny::runApp(, launch.browser=TRUE)
out1
dim(out1)
dim(out2)
out2
dim(out2)
dim(out1)
write.table(out1, file="clipboard")
write.table(out2, file="clipboard")
res1
res
shiny::runApp(, launch.browser=TRUE)
?runApp
shiny::runApp(, launch.browser=TRUE)
setwd("E:\\Shiny\\UploadMatch v1.0")
setwd("F:\\Shiny\\UploadMatch v1.0")
shiny::runApp(, launch.browser=TRUE)
